AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - beta
      - gamma
      - prod
    Default: beta
    Description: Stage that can be added to resource names
  LambdaAlias:
    Type: String
    Default: live
    Description: The alias used for live production traffic to the Lambda function.

Globals:
  Api:
    EndpointConfiguration: REGIONAL

Resources:
  # DynamoDB tables to store the FHIR resources
  FHIRPatientTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}_FHIRPatient
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "gender"
          AttributeType: "S"
        - AttributeName: "createdDate"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        -
          IndexName: "gender-createdDate-index"
          KeySchema:
            -
              AttributeName: "gender"
              KeyType: "HASH"
            -
              AttributeName: "createdDate"
              KeyType: "RANGE"
          Projection:

            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  FHIRObservationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}_FHIRObservation
      AttributeDefinitions:

        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "patientRefId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        -
          IndexName: "patientRefId-index"
          KeySchema:
            -
              AttributeName: "patientRefId"
              KeyType: "HASH"

          Projection:

            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  FHIRBundleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}_FHIRBundle
      AttributeDefinitions:

        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  # DynamoDB table to store meta data information for storing the raw payload received.
  FHIRResourceMetaTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}_FHIRResourceMeta
      AttributeDefinitions:

        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  FHIRConditionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}_FHIRCondition
      AttributeDefinitions:

        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "patientRefId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        -
          IndexName: "patientRefId-index"
          KeySchema:
            -
              AttributeName: "patientRefId"
              KeyType: "HASH"

          Projection:

            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

  UserPool:
    Type: AWS::Cognito::UserPool

    Properties:
      AutoVerifiedAttributes:
        - email
      UserPoolName: !Ref AWS::StackName
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: cc_confirmed

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient

    Properties:
      ClientName: !Sub '${AWS::StackName}-UserPool'
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  # S3 Bucket to store the actual payload as a file.
  FHIRInstanceBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Enabled
  FHIRInstanceBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: FHIRInstanceBucket
    Properties:
      Bucket: !Ref FHIRInstanceBucket

      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: Allow Lambda to put objects.
          Action:
            - "s3:PutObject"
          Effect: "Allow"
          Resource: !Sub 'arn:aws:s3:::${FHIRInstanceBucket}/*'
          Principal:
            Service: lambda.amazonaws.com

  #FHIR service API definitions
  FHIRServiceApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: 'Prod'
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        schemes:
        - "https"
        securityDefinitions:
          fhir-service-auth:
            type: apiKey
            name: "Authorization"
            in: header
            x-amazon-apigateway-authtype: cognito_user_pools
            x-amazon-apigateway-authorizer:
              type: cognito_user_pools
              providerARNs:
                - !GetAtt UserPool.Arn
        paths:
          /metadata:
            get:
              produces:
              - "application/json+fhir"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Bundle:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Bundle/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              parameters:
              - name: "proxy"
                in: "path"
                required: true
                type: "string"
              responses: {}
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "cxnb8k"
                cacheKeyParameters:
                - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Observation:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Observation/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              parameters:
              - name: "proxy"
                in: "path"
                required: true
                type: "string"
              responses: {}
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "do4k3j"
                cacheKeyParameters:
                - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Patient:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Patient/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              parameters:
              - name: "proxy"
                in: "path"
                required: true
                type: "string"
              responses: {}
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "1q8fa9"
                cacheKeyParameters:
                - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Condition:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /Condition/{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - "application/json+fhir"
              parameters:
              - name: "proxy"
                in: "path"
                required: true
                type: "string"
              responses: {}
              security:
              - fhir-service-auth: []
              x-amazon-apigateway-integration:
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FHIRFunction}:${LambdaAlias}/invocations'
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                cacheNamespace: "do4k3j"
                cacheKeyParameters:
                - "method.request.path.proxy"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

  FHIRFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.amazonaws.lab.LambdaHandler::handleRequest
      CodeUri: ../target/FHIRServer-0.0.1-SNAPSHOT.jar
      AutoPublishAlias: !Ref LambdaAlias
      Runtime: java8
      MemorySize: 512
      Timeout: 300
      Tracing: Active

      Policies:
        Statement:
          -  Effect: "Allow"
             Action:
               - "s3:PutObject"
               - "s3:GetObject"
             Resource:
               Fn::Join:
                 - ""
                 - - "arn:aws:s3:::"
                   - Ref: FHIRInstanceBucket
                   - "/*"
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:PutItem
              - s3:PutObject
            Resource:

              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}/index/gender-createdDate-index'
                - { Table: !Ref FHIRPatientTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}'
                - { Table: !Ref FHIRPatientTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}'
                - { Table: !Ref FHIRObservationTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}/index/patientRefId-index'
                - { Table: !Ref FHIRObservationTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}'
                - { Table: !Ref FHIRBundleTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}'
                - { Table: !Ref FHIRResourceMetaTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}'
                - { Table: !Ref FHIRConditionTable }
              - !Sub
                - 'arn:aws:dynamodb:*:*:table/${Table}/index/patientRefId-index'
                - { Table: !Ref FHIRConditionTable }
              # - !Sub
              #  - 'arn:aws:dynamodb:*:*:table/${Table}'
              #  - { Table: !Ref FHIRResourceMetaTable }
              # - { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "FHIRInstanceBucket" } ]]}

          - Effect: Allow
            Action:
              - logs:*
            Resource:
              - "*"

      Environment:
        Variables:
          FHIR_PATIENT_TABLE: !Ref FHIRPatientTable
          FHIR_RESOURCE_META_TABLE: !Ref FHIRResourceMetaTable
          FHIR_BUNDLE_TABLE: !Ref FHIRBundleTable
          FHIR_INSTANCE_BUCKET: !Ref FHIRInstanceBucket
          FHIR_OBSERVATION_TABLE: !Ref FHIRObservationTable
          FHIR_CONDITION_TABLE: !Ref FHIRConditionTable

          VALIDATE_FHIR_RESOURCE: false
          COGNITO_ENABLED: true
      Events:
        ProxyMetaResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /metadata
            Method: GET
        ProxyPatientsResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Patient
            Method: ANY
        ProxyPatientGreedyResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Patient/{proxy+}
            Method: ANY
        ProxyBundleResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Bundle
            Method: ANY
        ProxyBundleGreedyResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Bundle/{proxy+}
            Method: ANY
        ProxyObservationResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Observation
            Method: ANY
        ProxyObservationGreedyResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Observation/{proxy+}
            Method: ANY
        ProxyConditionResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Condition
            Method: ANY
        ProxyConditionGreedyResource:
          Type: Api
          Properties:
            RestApiId: !Ref FHIRServiceApi
            Path: /Condition/{proxy+}
            Method: ANY
Outputs:
  FHIRInstanceBucket:
    Description: FHIR Instance bucket
    Value: !GetAtt FHIRInstanceBucket.Arn
  ApiUrl:
    Description: URL for application
    Value: !Sub 'https://${FHIRServiceApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  UserPoolId:
    Description: User pool id for the provisioning users.
    Value: !Ref UserPool
  UserPoolClient:
    Description: App client id for the provisioning users.
    Value: !Ref UserPoolClient
